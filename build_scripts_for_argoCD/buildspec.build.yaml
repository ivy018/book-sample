version: 0.2
env:
  shell: bash
  git-credential-helper: yes
  variables:
    CHART_REPO: book-sample-chart
    TAG_PARAMETER_STORE: /app/repo/main/tag
    CHART_REPO_APP_NAME: app
  parameter-store:
    ASSUME_ROLE: /eks/role/arn
    IMAGE_TAG: /app/repo/main/tag
    PUB_SUB_A: /base/pub/subnet/a
    PUB_SUB_C: /base/pub/subnet/c
    CLUSTER_NAME: /eks/cluster/name
phases:
  install:
    runtime-versions:
      java: corretto11
    commands:
      - apt-get update
      - apt-get install -y jq
  pre_build:
    commands:
      - |
        export ASSUME_SESSION_NAME="codebuild-$(date +%s)"
        echo "ASSUME_ROLE_ARN=${ASSUME_ROLE}"
        aws sts assume-role --role-arn ${ASSUME_ROLE} --role-session-name ${ASSUME_SESSION_NAME} --output json > config.json
      - echo "Print awscli version"
      - aws --version
      - export MY_ECR="${AWS_ACCOUNT_ID}.dkr.ecr.ap-northeast-2.amazonaws.com/${ECR_REPO}"
      - echo "### SRC_VERISON-> ${CODEBUILD_RESOLVED_SOURCE_VERSION} | Logginging to ECR"
      - docker login --username AWS -p $(aws ecr get-login-password --region ${REGION_NAME}) ${MY_ECR}
      - export TAG=${CODEBUILD_RESOLVED_SOURCE_VERSION}
      - export TAG=$(echo $TAG | sed -e "s/\.//g"| tr '[:upper:]' '[:lower:]')
      - export TAG=$(echo "${TAG:0:8}")
      - export IMAGE_TAG="dev-${TAG}"
      - export REPOSITORY_URI="${MY_ECR}"
      - echo "## TAG-> ${TAG}"
      - |
        echo "### Start App build ###"
        chmod +x ./gradlew 
        ./gradlew clean build  -x test --no-daemon
  build:
    commands:
      - |
        echo "### Building Container Image ###"
        echo $CODEBUILD_SRC_DIR
        echo Build started on `date`
        echo Building the Docker image...
        docker build -t $REPOSITORY_URI:latest ./
        docker images
        docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG

      - |
        echo "### Pushing Container Image ###"
        docker push $REPOSITORY_URI:$IMAGE_TAG
      # - cat ./build_scripts/imageDef.json | envsubst > $CODEBUILD_SRC_DIR/imagedefinitions.json
      # - cat $CODEBUILD_SRC_DIR/imagedefinitions.json
  post_build:
    commands:
      - |
        export AWS_ACCESS_KEY_ID=$(cat config.json | jq ".Credentials.AccessKeyId" | tr -d '"')
        export AWS_SECRET_ACCESS_KEY=$(cat config.json | jq ".Credentials.SecretAccessKey" | tr -d '"')
        export AWS_SESSION_TOKEN=$(cat config.json | jq ".Credentials.SessionToken" | tr -d '"')
      - |
        echo "### Pushing Container Image Tag to SSM###"
        aws ssm put-parameter --name $TAG_PARAMETER_STORE --value ${IMAGE_TAG} --type String --region $REGION_NAME --overwrite
        echo $IMAGE_TAG
        echo $PUB_SUB_A
        echo $PUB_SUB_C
      - |
        git remote add chart https://git-codecommit.$REGION_NAME.amazonaws.com/v1/repos/$CHART_REPO
        git clone https://git-codecommit.$REGION_NAME.amazonaws.com/v1/repos/$CHART_REPO
        echo "### Deploy helm chart"
        cd $CHART_REPO
      
        cat $CHART_REPO_APP_NAME/values-template.yaml | envsubst > $CHART_REPO_APP_NAME/values.yaml
        git config --global user.email "abc@abc.com"
        git config --global user.name "abc"
        git add . 
        git commit -m "update helm chat IAMAGE_TAG=${IMAGE_TAG}"
        git push chart main
      - echo "${IMAGE_TAG}" >> ../build_output.txt
      
artifacts:
  files:
    - build_output.txt
cache:
  paths:
    - '/root/.gradle/caches/**/*'
